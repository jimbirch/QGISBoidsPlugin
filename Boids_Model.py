# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Boids_Model
                                 A QGIS plugin
 Generates boids and runs them for several time intervals
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-04-06
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Jim Burchfield
        email                : jim@jdbirch.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import (
    QSettings, 
    QTranslator, 
    QCoreApplication,
    QVariant
)
from qgis.PyQt.QtGui import (
    QIcon,
    QColor
)
from qgis.PyQt.QtWidgets import QAction
from qgis.core import (
    Qgis,            # Send messages to the user when the model run completes
    QgsApplication,  # Run parts of QGIS
    QgsPointXY,      # Use the point geometry
    QgsProject,      # Open the current project, add layers
    QgsCoordinateReferenceSystem, # Get and set our CRS
    QgsField,        # Add fields to our points
    QgsFields,       # IBID
    QgsFeature,      # Add features to layers
    QgsGeometry,     # Add geometry to features
    QgsVectorDataProvider, # Create and modify a vector layer
    QgsVectorLayer,  # IBID
    QgsVectorFileWriter # If we want to save our output
)
from qgis.core.additions.edit import edit

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Boids_Model_dialog import Boids_ModelDialog
import os.path

# Imports for our model
import numpy as np
from .boid import Boid


class Boids_Model:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Boids_Model_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Boids Model')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Boids_Model', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Boids_Model/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Generate Boids'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Boids Model'),
                action)
            self.iface.removeToolBarIcon(action)

    def runBoids(self, nB, xMin, yMin, xMax, yMax, timeSteps, sampleFreq):
        # A simple implementation of boids, responsible for
        # calling our boid object and updating its position,
        # then adding the boid positions to our map.

        # Get our project instance
        project = QgsProject.instance()
        # Get our project CRS
        crs = project.crs()

        # Create our layer
        vLayer = QgsVectorLayer("Point", "temporary_boids", "memory")
        prov = vLayer.dataProvider()

        # Add our fields
        prov.addAttributes([QgsField("boidID", QVariant.String),
                              QgsField("Direction", QVariant.Double),
                              QgsField("Time", QVariant.Int)])
        vLayer.updateFields()

        # Set our CRS
        vLayer.setCrs(crs)

        # Compute our starting area
        xRange = xMax - xMin
        yRange = yMax - yMin

        # Spawn our boids. We'll put them at random locations
        # within a 10 m x 10 m area at the center of our study
        # area to start
        school = [Boid(np.random.random() * 10 + xMin + xRange/2,
                    np.random.random() * 10 + yMin + yRange/2,
                    xMin, yMin, xMax, yMax) for _ in range(nB)]

        # Let's loop
        for tS in range(timeSteps):
            for boid in school:
                boid.behave(school)
                boid.update()
                # Check if we want to store this location
                if tS % sampleFreq == 0:
                    direction = np.arctan2(boid.velocity[0], boid.velocity[1]) * 57.29578
                    # add a feature
                    fet = QgsFeature()
                    fet.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(boid.position[0],boid.position[1])))
                    fet.setAttributes([str(boid.boidID), direction, tS])
                    prov.addFeatures([fet])
                    vLayer.updateExtents()
        # Add our map layer to the project
        if vLayer.isValid():
            project.addMapLayer(vLayer)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = Boids_ModelDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            nB = int(self.dlg.numBoids.text())
            nX = int(self.dlg.minX.text())
            nY = int(self.dlg.minY.text())
            mX = int(self.dlg.maxX.text())
            mY = int(self.dlg.maxY.text())
            tS = int(self.dlg.tStep.text())
            sF = int(self.dlg.sFreq.text())
            self.runBoids(nB, nX, nY, mX, mY, tS, sF)
            self.iface.messageBar().pushMessage("Success", "Boids generated successfully.", level = Qgis.Success, duration = 10)

